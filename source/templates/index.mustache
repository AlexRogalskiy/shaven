<!DOCTYPE HTML>
<html>
<head>
  <meta charset=UTF-8>
  <title>Shaven</title>

  <meta name=viewport content="width=device-width">

  <link rel=stylesheet href="//fonts.googleapis.com/css?family=Grand+Hotel">
  <link rel="shortcut icon" href=../images/favicon.png>
</head>
<body>

<div id=wrapcontent>

  <header>
    <h1>Shaven</h1><small>{{version}}</small>

    <h2>Get rid of your old-fashioned face furniture and build sleek
      templates!</h2>
  </header>

  <section>

    <h1>What is Shaven?</h1>

    <p>Shaven is a DOM building utility and template engine based on JsonML.
      This simple markup language lets you easily represent XML/HTML with
      JSON and plain JavaScript objects.
      Templates are therefore simply a tree of nested arrays.</p>

    <div id=buttons>
      <iframe class=github
              src="http://ghbtns.com/github-btn.html?user=adius&amp;repo=shaven&amp;type=watch&amp;count=true&amp;size=small">
      </iframe>
      <a href="https://twitter.com/share"
         class="twitter-share-button"
         data-via="AdrianSieber"
         data-text="Shaven - Get rid of your old-fashioned face furniture and build sleek templates!"
         style=display:none>
        Tweet
      </a>
    </div>

    <!-- TODO: Re-enable editing -->
    <!-- <p><strong>All code examples with this icon are editable:</strong>
      <img src=../images/edit-black-s.png alt=edit/></p> -->

    <textarea id=codeOverview class=code rows=11 data-lang=javascript>
      ['#demo',
        ['h1#logo', 'Test', {title: 'Test'}],
        ['p', 'Some example text'],
        ['ul#list.bullets',
          ['li', 'item1'],
          ['li.active', 'item2'],
          ['li',
            ['a', 'item3', {href: '#'}],
          ],
        ],
      ]
    </textarea>

    <p>compiles to</p>

    <textarea id=codeOverviewOut class=code rows=12
              data-lang=html data-input=codeOverview readonly>
      <div id="demo">
        <h1 id="logo" title="Test">Test</h1>

        <p>Some example text</p>
        <ul id="list" class="bullets">
          <li>item1</li>
          <li class="active">item2</li>
          <li>
            <a href="#">item3</a>
          </li>
        </ul>
      </div>
    </textarea>

    <p>The first element of the array is the root html element which
      is going to contain all the child-elements.
      Those are arrays themselves and are structured as follows:</p>

    <ul>
      <li>The first array-element is a string representing
        the html-tag (including syntax-sugar)
      </li>
      <li>Other strings are the text-content of the element</li>
      <li>One or more objects contain the attributes</li>
      <li>Each sub-array or html-element is a child-element</li>
    </ul>
  </section>

  <section>
    <h1>Installation</h1>

    <p>On the server you can install Shaven with npm:</p>

    <textarea id=codeInstall class=code rows=1 readonly>
      npm install shaven
    </textarea>


    <p>Then require it in your scripts like this:</p>

    <textarea id=codeRequire class=code rows=1
      data-lang=javascript readonly>
      import shaven from 'shaven'
    </textarea>

    <p>In the browser load the browser version of shaven.
      You can get it from
      <a href=https://github.com/adius/shaven>Github</a>
    </p>

    <textarea id=codeLoad class=code rows=1 data-lang=html readonly>
      <script src="shaven.js"></script>
    </textarea>


    <p>Now you can start using it by passing an array to Shaven:</p>

    <textarea id=codeUse rows=1 data-lang=javascript readonly>
      const shavenObject = shaven(['p', 'some text'])
    </textarea>

  </section>

  <section>
    <h1>Insert Methods</h1>

    <p>There are three different methods to add a DOM-fragment
      to a document.
    </p>

    <h2>1. Inject it straight into the DOM:</h2>

    <textarea id=codeStraightInsert class=code rows=7
      data-lang=javascript readonly>
      shaven(
        [document.body,
          ['div#demo',
            …
          ],
        ]
      )
    </textarea>


    <h2>2. Assign the Shaven-object to a variable and append
      the fragment later.
    </h2>

    <p>To get the HTML-fragment from the Shaven-object reference it with
      <code>.rootElement</code>.</p>

    <textarea id=codeAppend class=code rows=7 data-lang=javascript readonly>
      const shavenObject = shaven(
        ['#demo',
          …
        ]
      )

      document.body.appendChild(shavenObject.rootElement)
    </textarea>

    <p>Both compiles to:</p>

    <textarea id=codeInsertOut class=code rows=5 data-lang=html readonly>
      <body>
      <div id="demo">
        …
      </div>
      </body>
    </textarea>


    <h2>3. Set the <code>innerHTML</code> of an element.</h2>

    <p>To get the HTML string of a Shaven-object simply call the
      <code>toString()</code> method, convert the object to a String
      with <code>String(shavenObject)</code> or the easiest way -
      add it to another string.
    </p>

    <textarea rows=3 data-lang=javascript>
      console.log('The HTML for the object is ' + shavenObject)

      document.body.innerHTML = shavenObject.toString()
    </textarea>

  </section>

  <section>
    <h1>Syntax Sugar</h1>

    <h2>Tag</h2>

    <p>When you omit the html-tag it uses the default <code>div</code> tag.
      So <code>div#container</code> ist the same as
      <code>#container</code>
    </p>

    <textarea id=divWithoutId rows=1 data-lang=javascript>
      ['#container', ['p', 'Test']]
    </textarea>

    <p>compiles to</p>

    <textarea id=divWithoutIdOut rows=1
      data-input=divWithoutId data-lang=html readonly>
      <div id="container"><p>Test</p></div>
    </textarea>


    <h2>Id</h2>

    <textarea id=codeId rows=1 data-lang=javascript>
      ['p#example', 'example text']
    </textarea>

    <p>compiles to</p>

    <textarea id=codeIdOut rows=1 data-input=codeId data-lang=html readonly>
      <p id="example">example text</p>
    </textarea>


    <h2>Class</h2>

    <textarea id=codeClass rows=1 data-lang=javascript>
      ['p.info', 'example text']
    </textarea>

    <p>compiles to</p>

    <textarea id=codeClassOut rows=1 data-input=codeClass
      data-lang=html readonly>
      <p class="info">example text</p>
    </textarea>

  </section>

  <section>
    <h1>References</h1>

    <p>When an element with an id is created it automatically gets inserted
      into the corresponding property in the
      return-object of the shaven function call.
      Therefore it can get easily referenced later on.</p>

    <textarea id=codeIdReference rows=7 data-lang=javascript readonly>
      const shavenObject = shaven(
        [document.body,
          ['div#test', 'some text'],
        ]
      )

      doSomething(shavenObject.ids.test)
    </textarea>

    <p>Reference an element without an id by using the <code>$</code>
      keyword
      to assign it a reference-name.</p>

    <textarea id=codeDollarReference rows=7 data-lang=javascript readonly>
      const shavenObject = shaven(
        [document.body,
          ['div$test', 'some text'],
        ]
      )

      doSomething(shavenObject.references.test)
    </textarea>
  </section>

  <section>
    <h1>Properties</h1>

    <p>All entries of an object become the attributes of the element.
      If an object entry is <code>undefined</code> the attribute is
      set to an empty string.
      If an entry is <code>null</code> or <code>false</code> the attribute
      is not created.
    </p>
  </section>

  <section>
    <h1>Style Attribute</h1>

    <p>If the style entry is an object it will automatically get compiled
      to a string. This is especially useful for working with svgs, where
      inline styles are still frequently used.
      Values which are <code>false</code>, <code>null</code> or
      <code>undefined</code> are deleted from the final style-string.</p>

    <textarea id=codeProperties rows=9 data-lang=javascript>
      ['p', 'Hello', {
        class: 'new focus',
        'data-lang': 'de',
        title: false,
        style: {
          color: 'red',
          display: 'block',
          font: null,
        },
      }]
    </textarea>

    <p>compiles to</p>

    <textarea
      id=codePropertiesOut
      rows=3
      data-input=codeProperties
      data-lang=html
      readonly
    >
      <p class="new focus" data-lang="de" style="color:red;display:block">
        Hello
      </p>
    </textarea>
  </section>

  <section>
    <h1>Transform Attribute</h1>

    <p>If a transform attribute is an an array of objects
      it will get compiled to an SVG
      <a href="http://devdocs.io/svg/attribute/transform">transform
      string</a>.
    </p>

    <textarea id=transformString rows=9 data-lang=javascript>
      ['svg',
        {width: 50, height: 50},
        ['circle', {
          r: 5,
          transform: [
            {type: 'translate', x: 4, y: 5},
            {type: 'skewX', x: 6},
          ],
        }],
      ]
    </textarea>

    <p>compiles to</p>

    <textarea
      id=transformStringOut
      rows=3
      data-input=transformString
      data-lang=html
      readonly
    >
      <svg width="50" height="50">
        <circle r="5" transform="translate(4,5) skewX(6)"></circle>
      </svg>
    </textarea>

  </section>

  <section>
    <h1>Escaping</h1>

    <p>HTML-strings are escaped by default.</p>

    <textarea id=codeEscape rows=1 data-lang=javascript>
      ['div', '<p>This is <em>HTML</em></p>']
    </textarea>

    <p>compiles to</p>

    <textarea id=codeEscapeOut rows=1 data-input=codeEscape data-lang=html
              readonly>
      <div>&amp;lt;p&amp;gt;This is &amp;lt;em&amp;gt;HTML&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt;</div>
    </textarea>

    <br/>

    <p>To disable escaping add a <code>!</code> at the end of the
      element-tag string.</p>

    <textarea id=codeNoEscape rows=1 data-lang=javascript>
      ['div!', '<p>This is <em>HTML</em></p>']
    </textarea>

    <p>compiles to</p>

    <textarea id=codeNoEscapeOut rows=1 data-input=codeNoEscape
              data-lang=html readonly>
      <div><p>This is <em>HTML</em></p></div>
    </textarea>

  </section>

  <section>
    <h1>Falsy values</h1>

    <p>When an element array contains an <code>undefined</code>
      content-value
      or no content-value at all, the element will get compiled with an
      empty body.</p>

    <p>When an element contains a <code>null</code> or a <code>false</code>
      value,
      the element won't get compiled at all. This is handy for disabling
      parts
      of templates or ensuring that no empty container-elements get
      rendered.
      (A <code>true</code> value does therefore not change the
      compilation.)
    </p>

  </section>

  <section>
    <h1>Subarrays</h1>

    <p>An array which consists exclusively of subarrays will get merged
        into the current array</p>

    <textarea id=codeSubarray rows=5 data-lang=javascript>
      ['p', [
        ['span', 'One'],
        ['span', 'Two'],
        ['span', 'Three'],
      ]]
    </textarea>

    <p>compiles to</p>

    <textarea id=codeSubarrayOut rows=5 data-input=codeSubarray
              data-lang=html readonly>
      <p>
        <span>One</span>
        <span>Two</span>
        <span>Three</span>
      </p>
    </textarea>


  </section>

  <section>
    <h1>Templates</h1>

    <p>In order to create reusable templates it's best practice to create a
      function
      which accepts a data object, inserts the data into the JsonML array
      and
      returns it.<br/>
      Finally iterate over the contacts and use one of the two insertion
      methods
      to build the DOM with the contacts.</p>

    <textarea id=codeTemplate rows=20 data-lang=javascript readonly>
      function contactTemplate (data) {
        return ['div.contact',
          ['h1', data.name],
          ['dl',
            ['dt', 'Age:'],
            ['dd', data.age],
            ['dt', 'Mobile:'],
            ['dd', data.mobile],
            ['dt', 'Email:'],
            ['dd', data.email],
          ]
        ]
      }

      contacts.forEach(contact =>
        shaven([
          document.body,
          contactTemplate(contact),
        ])
      )
    </textarea>

  </section>


  <section>
    <h1>Callback Functions</h1>

    <p>You can provide a callback function,
      which will be called after the element has been created,
      with the element as the only argument.
      This functionality is especially suited to add event-listeners.</p>

    <textarea id=codeCallback rows=9 data-lang=javascript readonly>
      function doSomething (element) {
        alert(element + ' was created')
      }

      shaven(
        [document.body,
          ['div', doSomething],
        ]
      )
    </textarea>
  </section>

  <section>
    <h1>Configuration</h1>

    <p>Shaven can be configured at module scope and settings can be
      overwritten at each invocation.

      Available settings are:
    </p>

    <textarea rows="8" data-lang=javascript readonly>
      {
        // Wrap all attribute values in quotes
        quoteAttributes: true,

        // Character used as quotation mark
        quotationMark: '"',

        // Escape HTML in text if not explicitly defined otherwise
        escapeHTML: true,

        // Convert array of transform objects to transform-string
        convertTransformArray: true,

        // Default namespace
        namespace: 'xhtml',

        // Automatically identify namespace
        autoNamespacing: true,
      }
    </textarea>

    <p>To overwrite the default settings use <code>setDefaults()</code>.
      This will be set at the module scope for every invocation of shaven.
    </p>

    <textarea rows="5" data-lang=javascript readonly>
      import shaven from 'shaven'

      shaven.setDefaults({
        quoteAttributes: false,
      })
    </textarea>

    <p>To overwrite the settings for only one element use the object
      invocation mode of shaven:
    </p>

    <textarea id="configuration" rows="4" data-lang=javascript readonly>
      shaven({
        quoteAttributes: false,
        elementArray: ['p', 'Example text', {title: example}],
      })
    </textarea>

    <p>compiles to</p>

    <textarea id="configurationOut" rows="4" data-lang=html readonly>
      <p title=example>Example text</p>
    </textarea>
  </section>


  <section>
    <h1>Namespaces</h1>

    <p>Shaven automatically uses the correct namespaces to create HTML, SVG,
      and MathML.
      It is, however, also possible to use a custom namespace
      to create documents in various other XML-based languages
      or to overwrite the defaults.
    </p>

    <textarea id=codeSvg rows=6 data-lang=javascript readonly>
      shaven({
        namespace: 'http://www.mozilla.org/xbl',
        elementArray: ['page',
          ['vbox', {flex: 1}],
        ],
      })
    </textarea>

    <p>compiles to</p>

    <textarea id=codeSvgOut rows=3 data-lang=html readonly>
      <page>
        <vbox flex="1"></vbox>
      </svg>
    </textarea>

  </section>

  <footer>
    <a href=https://adriansieber.com>By Adrian Sieber</a>
    <span class=muted>•</span>
    <a href=https://github.com/adius/shaven>GitHub</a>
    <span class=muted>•</span>
    <a href=https://github.com/adius/shaven/issues>Issues</a>
    <span id=version>Version {{version}}</span>
  </footer>
</div>

<a id=forkMe href=https://github.com/adius/shaven>Fork me on GitHub</a>

<script src="./scripts/bundle.js"></script>

</body>
</html>
