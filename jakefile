'use strict'

const fs = require('fs')
const uglify = require('uglify-js')

const packageData = require('./package.json')


function buildMinifiedJs (string) {

	const compressor = uglify.Compressor()
	const ast = uglify.parse(string)

	ast.figure_out_scope()
	ast.transform(compressor)
	ast.figure_out_scope()
	ast.compute_char_frequency()
	ast.mangle_names()

	return ast.print_to_string({"comments": /Shaven/})
}


desc('Default build process')
task(
	'default',
	[
		'build/shaven.js',
		'build/shaven.min.js',
		'public/index.html'
	],
	function () {
	}
)


desc('Compile shaven.js')
file(
	'build/shaven.js',
	['source/shaven.js', 'package.json'],
	{async: true},
	function () {

		const fileName = this.name
		const jsString = fs
			.readFileSync('source/shaven.js', 'utf-8')
			.replace('{{ VERSION }}', packageData.version)
		const file = fs.openSync(fileName, 'w+')

		fs.write(file, jsString, undefined, undefined, () => {
			console.log(`Building ${fileName} succeeded`)
		})

		complete()
	}
)


desc('Compile shaven.min.js')
file(
	'build/shaven.min.js',
	['source/shaven.js', 'package.json'],
	{async: true},
	function () {

		const fileName = this.name
		const jsString = fs.readFileSync('source/shaven.js', 'utf-8')
		const minifiedJsString = buildMinifiedJs(
			jsString.replace('{{ VERSION }}', packageData.version)
		)
		const file = fs.openSync(fileName, 'w+')

		fs.write(file, jsString, undefined, undefined, () => {
			console.log(`Building ${fileName} succeeded`)
		})

		complete()
	}
)


desc('Compile index.html')
file('public/index.html', ['package.json'], {async: true}, function () {

	const fileName = this.name
	const data = fs
		.readFileSync(fileName, 'utf-8')
		.replace(/Version [\.0-9]+/g, `Version ${packageData.version}`)

	fs.writeFileSync(fileName, data)

	console.log(`Building ${fileName} succeeded`)

	complete()
})


desc('Remove compiled files')
task('clean', [], {async: true}, () => {

	const files = [
		'build/shaven.js',
		'build/shaven.min.js'
	]

	files.forEach(file => {
		fs.unlink(file, error => {
			if (error) console.error(error)
		})
	})

	complete()
})
